{"version":3,"sources":["pages/HomePage/index.jsx","components/Card/index.jsx","components/NavBar/index.jsx","pages/GamePage/index.jsx","pages/SettingsPage/index.jsx","constants/index.js","utilities/index.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","startGame","onChangePlayers","players","highScores","className","map","player","index","key","onChange","type","value","name","data-id","onClick","role","aria-label","score","Card","flipped","number","symbol","inPlay","clickable","self","data-number","NavBar","to","exact","GamePage","deck","onReset","turn","gameIsOver","currentPlayer","card","i","SettingsPage","settings","onChangeNumber","onChangeDifficulty","numberOfPlayers","symbols","defaultSettings","defaultHighScores","createDeck","symbolsArray","symbolsDoubled","concat","shuffle","matched","arr","j","inPlace","base","length","Math","floor","random","createPlayers","numOfPlayers","push","getWinner","sort","playerA","playerB","sortPlayers","App","history","useHistory","useState","setGameIsOver","setSettings","setDeck","setPlayers","cards","setTurn","setHighScores","useEffect","reduce","accumulator","isGameOver","newHighScores","slice","updatedPlayers","sortedPlayers","setTimeout","path","component","event","parseInt","target","dataset","id","e","clickedCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a390228.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./HomePage.css\";\n\nconst HomePage = ({ startGame, onChangePlayers, players, highScores }) => (\n  <div className=\"homePage\">\n    {players.map((player, index) => (\n      <div key={index}>\n        <label>Player {index + 1}: </label>\n        <input\n          onChange={onChangePlayers}\n          type=\"text\"\n          value={player.name}\n          data-id={index}\n        ></input>\n      </div>\n    ))}\n\n    <button type=\"button\" onClick={startGame}>\n      start playing\n    </button>\n    <h2>\n      <span role=\"img\" aria-label=\"star icon\">\n        ‚≠ê\n      </span>{\" \"}\n      High Scores\n      <span role=\"img\" aria-label=\"star icon\">\n        {\" \"}\n        ‚≠ê\n      </span>\n    </h2>\n    {highScores.map((player, index) => (\n      <div key={index}>\n        <p>\n          {\" \"}\n          name: {player.name}\n          <br />\n          score: {player.score}\n        </p>\n      </div>\n    ))}\n  </div>\n);\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ flipped, onClick, number, symbol, inPlay }) => {\n  const clickable = !flipped && inPlay;\n  return (\n    <div\n      className={clickable ? \"card inPlay\" : \"card\"}\n      onClick={(self) => {\n        if (clickable) {\n          onClick(self);\n        }\n      }}\n      data-number={number}\n    >\n      {flipped ? symbol : \"üÉè\"}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./NavBar.css\";\nconst NavBar = () => (\n  <nav>\n    <ul>\n      <li>\n        <NavLink to=\"/\" exact>\n          {\" \"}\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/game\"> Game</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/settings\"> Settings</NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./GamePage.css\";\nimport { Card } from \"../../components\";\n\nconst GamePage = ({\n  deck = [],\n  onReset,\n  onClick,\n  players,\n  turn,\n  gameIsOver,\n}) => (\n  <div className=\"gamePage\">\n    {gameIsOver ? (\n      <h2 className=\"game-over\">Game over!</h2>\n    ) : (\n      <h2 className=\"game-on\">Game on!</h2>\n    )}\n\n    {players.map((player, index) => (\n      <div key={index}>\n        <p className={index === turn.currentPlayer ? \"selectedPlayer\" : \"\"}>\n          <strong>Name:</strong> {player.name}\n          <br />\n          <strong> Score:</strong> {player.score}\n        </p>\n      </div>\n    ))}\n\n    {deck.map((card, i) => (\n      <Card key={i} number={i} {...card} onClick={onClick} />\n    ))}\n\n    <button onClick={onReset}>Reset</button>\n  </div>\n);\n\nexport default GamePage;\n","import React from \"react\";\nimport \"./SettingsPage.css\";\n\nconst SettingsPage = ({ settings, onChangeNumber, onChangeDifficulty }) => (\n  <div className=\"settingsPage\">\n    <label>Players Number</label>\n    <input\n      onChange={onChangeNumber}\n      type=\"text\"\n      value={settings.numberOfPlayers}\n    ></input>\n    <br />\n    <label>Difficulty</label>\n    <input\n      onChange={onChangeDifficulty}\n      type=\"text\"\n      value={settings.symbols}\n    ></input>\n  </div>\n);\n\nexport default SettingsPage;\n","export const defaultSettings = {\n  symbols: \"üê®üêªüê∂üêóüê≠üêîüê∏üê±ü¶ÅüêØü¶äüê∫üêµüê∑üêπüê∞\",\n  numberOfPlayers: 2,\n};\n\nexport const defaultHighScores = [\n  { name: \"Ash\", score: 3 },\n  { name: \"Misty\", score: 2 },\n  { name: \"Brock\", score: 1 },\n];\n","export const createDeck = (symbols) => {\n  const symbolsArray = [...symbols];\n  const symbolsDoubled = symbolsArray.concat(symbolsArray);\n  const symbolsShuffled = shuffle(symbolsDoubled);\n  const deck = symbolsShuffled.map((symbol) => ({\n    symbol,\n    flipped: false,\n    matched: false,\n    inPlay: true,\n  }));\n  return deck;\n};\n\nexport const shuffle = (arr, inPlace = true) => {\n  // shallow copy if not inPlace, modifying the input array otherwise\n  const base = inPlace ? arr : [].concat(arr);\n  for (let i = arr.length, j; i; ) {\n    j = Math.floor(Math.random() * i);\n    [base[i], base[j]] = [base[j], base[--i]];\n  }\n  return base;\n};\n\nexport const createPlayers = (numOfPlayers) => {\n  const players = [];\n  for (let i = 0; i < numOfPlayers; i++) {\n    players.push({ name: \"\", score: 0 });\n  }\n  return players;\n};\nexport const getCardsFlipped = (deck) => {\n  return deck.filter((element) => element.flipped);\n};\n\nexport const isGameOver = (deck, players) => {\n  const playersAccumulatedScore = players.reduce(\n    (accumulator, player) => accumulator + player.score,\n    0\n  );\n\n  return playersAccumulatedScore === deck.length / 2;\n};\n\nexport const getWinner = (players) => {\n  const sortedPlayers = players.sort(\n    (playerA, playerB) => playerB.score - playerA.score\n  );\n  return sortedPlayers[0];\n};\n\nexport const sortPlayers = (players) => {\n  const sortedPlayers = players.sort(\n    (playerA, playerB) => playerB.score - playerA.score\n  );\n  return sortedPlayers;\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { HomePage, GamePage, SettingsPage } from \"./pages\";\nimport { defaultSettings, defaultHighScores } from \"./constants\";\nimport {\n  createDeck,\n  createPlayers,\n  isGameOver,\n  getWinner,\n  sortPlayers,\n} from \"./utilities\";\n\nfunction App() {\n  const history = useHistory();\n  const [gameIsOver, setGameIsOver] = useState(false);\n  const [settings, setSettings] = useState(defaultSettings);\n  const [deck, setDeck] = useState(createDeck(defaultSettings.symbols));\n  const [players, setPlayers] = useState(\n    createPlayers(defaultSettings.numberOfPlayers)\n  );\n  const [turn, setTurn] = useState({ currentPlayer: 0, cards: [] });\n  const [highScores, setHighScores] = useState(defaultHighScores);\n  const onReset = () => {\n    setDeck(createDeck(settings.symbols));\n    setTurn({ currentPlayer: 0, cards: [] });\n    setPlayers(\n      players.map((player, index) => {\n        return { ...player, score: 0 };\n      })\n    );\n    setGameIsOver(false);\n  };\n  const onClick = (e) => {\n    const clickedCard = +e.target.dataset.number;\n    setDeck(\n      deck.map((card, i) =>\n        i !== clickedCard ? card : { ...card, flipped: !card.flipped }\n      )\n    );\n    setTurn({ ...turn, cards: turn.cards.concat([clickedCard]) });\n  };\n  const startGame = () => {\n    history.push(\"/game\");\n    setDeck(createDeck(settings.symbols));\n    setPlayers(createPlayers(settings.numberOfPlayers));\n  };\n  const onChangePlayers = (event) => {\n    setPlayers(\n      players.map((player, index) =>\n        index === parseInt(event.target.dataset.id)\n          ? { ...player, name: event.target.value }\n          : player\n      )\n    );\n  };\n  const onChangeNumber = (event) => {\n    setSettings({ ...settings, numberOfPlayers: event.target.value });\n    setPlayers(createPlayers(event.target.value));\n    setDeck(createDeck(settings.symbols));\n    setTurn({ ...turn, currentPlayer: 0, cards: [] });\n  };\n  const onChangeDifficulty = (event) => {\n    setSettings({ ...settings, symbols: event.target.value });\n    setDeck(createDeck(event.target.value));\n    setPlayers(\n      players.map((player, index) => {\n        return { ...player, score: 0 };\n      })\n    );\n    setTurn({ ...turn, currentPlayer: 0, cards: [] });\n  };\n\n  useEffect(() => {\n    if (!gameIsOver) {\n      if (deck.length > 0 && isGameOver(deck, players)) {\n        // push to highscore\n        let newHighScores = highScores.concat([getWinner(players)]);\n        newHighScores = sortPlayers(newHighScores);\n        newHighScores = newHighScores.slice(0, 3);\n        setHighScores(newHighScores);\n        setGameIsOver(true);\n      }\n      if (turn.cards.length === 2) {\n        if (deck[turn.cards[0]].symbol === deck[turn.cards[1]].symbol) {\n          // take cards out of play\n          setDeck(\n            deck.map((card, i) =>\n              i === turn.cards[0] || i === turn.cards[1]\n                ? { ...card, inPlay: false }\n                : card\n            )\n          );\n          // increment player score\n          const updatedPlayers = players.map((player, index) =>\n            index === turn.currentPlayer\n              ? { ...player, score: player.score + 1 }\n              : player\n          );\n          const sortedPlayers = sortPlayers(updatedPlayers);\n          setPlayers(sortedPlayers);\n          // same player turn\n          setTurn({ ...turn, cards: [] });\n        } else {\n          // blocker\n          setDeck(\n            deck.map((card, i) => {\n              return { ...card, inPlay: false };\n            })\n          );\n          // next player turn\n          setTurn({\n            ...turn,\n            cards: [],\n            currentPlayer:\n              turn.currentPlayer + 1 < players.length\n                ? turn.currentPlayer + 1\n                : 0,\n          });\n          setTimeout(() => {\n            // flip back and unblock\n            setDeck(\n              deck.map((card, i) =>\n                i === turn.cards[0] || i === turn.cards[1]\n                  ? { ...card, flipped: false, inPlay: true }\n                  : { ...card, inPlay: true }\n              )\n            );\n          }, 1000);\n        }\n      }\n    }\n  }, [deck, turn, players, highScores, settings, gameIsOver]);\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={HomePage}>\n        <HomePage\n          startGame={startGame}\n          onChangePlayers={onChangePlayers}\n          players={players}\n          highScores={highScores}\n        />\n      </Route>\n      <Route path=\"/game\" exact>\n        <GamePage\n          deck={deck}\n          onClick={onClick}\n          onReset={onReset}\n          players={players}\n          turn={turn}\n          gameIsOver={gameIsOver}\n        />\n      </Route>\n      <Route path=\"/settings\" exact>\n        <SettingsPage\n          settings={settings}\n          onChangeNumber={onChangeNumber}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { NavBar } from \"./components\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <NavBar />\n      <App />\n    </React.StrictMode>\n    ,\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}